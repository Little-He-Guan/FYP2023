/**
 * @author Guanyuming He
 */
package edu.guanyfyp.format;

import edu.guanyfyp.SyntaxContext;

/**
 * A code block represents the format influence of a code token generated by a parser.
 * Here the type of the token will also be taken into consideration because
 * different code blocks fit into different format restrictions.
 */
public class CodeBlock extends FormatToken 
{
	
	public enum Type
	{
		// Unknown for now.
		// Perhaps unassigned.
		UNKNOWN,
		
		// TODO: Divide keywords
		// into groups of finer granularity
		// that can reflect OOP and other programming styles.
		KEYWORD,
		
		// Punctuation
		SEMICOLON,
		COMMA,
		DOT,
		// Parentheses
		L_PARENTHESIS,
		R_PARENTHESIS,
		// square brackets
		L_SBRACKET,
		R_SBRACKET,
		// curly brackets
		L_CBRACKET,
		R_CBRACKET,
		
		// Identifiers
		CLASS_NAME,
		METHOD_NAME,
		FIELD_NAME,
		VARIABLE_NAME,
	}
	
	// The type of the code token.
	// Not final because the information may not be available at creation.
	protected Type type;
	public Type getType() { return type; }
	public void setType(Type type) { this.type = type; }

	/**
	 * The constructor that assigns type when the info is available
	 * @param characters
	 * @param position
	 * @param act_pos
	 * @param line
	 * @param index_in_line
	 * @param type
	 */
	public CodeBlock
	(
		String characters, 
		int position, int act_pos, 
		int line, int index_in_line,
		Type type
	) 
	{
		super
		(
			characters, position, act_pos, line, index_in_line
		);	
		this.type = type;
	}
	
	/**
	 * The constructor that should be used when the type is unavailable.
	 * @param characters
	 * @param position
	 * @param act_pos
	 * @param line
	 * @param index_in_line
	 */
	public CodeBlock
	(
		String characters, 
		int position, int act_pos, 
		int line, int index_in_line
	) 
	{
		super
		(
			characters, position, act_pos, line, index_in_line
		);	
		this.type = Type.UNKNOWN;
	}

	@Override
	protected float calculate_format_score(SyntaxContext ctx)
	{
		throw new RuntimeException("Not implemented.");		
	}
}
